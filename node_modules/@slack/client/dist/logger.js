"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const objectEntries = require("object.entries"); // tslint:disable-line:no-require-imports
/**
 * Severity levels for log entries
 */
var LogLevel;
(function (LogLevel) {
    LogLevel["ERROR"] = "error";
    LogLevel["WARN"] = "warn";
    LogLevel["INFO"] = "info";
    LogLevel["DEBUG"] = "debug";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/**
 * Default logger which logs to stdout and stderr
 */
class ConsoleLogger {
    constructor() {
        this.level = LogLevel.INFO;
        this.name = '';
        // In node < 8.0.0, console.debug does not exist
        if (console.debug !== undefined) {
            this.debugFn = console.debug;
        }
        else {
            this.debugFn = console.log;
        }
    }
    /**
     * Sets the instance's log level so that only messages which are equal or more severe are output to the console.
     */
    setLevel(level) {
        this.level = level;
    }
    /**
     * Set the instance's name, which will appear on each log line before the message.
     */
    setName(name) {
        this.name = name;
    }
    /**
     * Log a debug message
     */
    debug(...msg) {
        if (ConsoleLogger.isMoreOrEqualSevere(LogLevel.DEBUG, this.level)) {
            this.debugFn(ConsoleLogger.labels.get(LogLevel.DEBUG), this.name, ...msg);
        }
    }
    /**
     * Log an info message
     */
    info(...msg) {
        if (ConsoleLogger.isMoreOrEqualSevere(LogLevel.INFO, this.level)) {
            console.info(ConsoleLogger.labels.get(LogLevel.INFO), this.name, ...msg);
        }
    }
    /**
     * Log a warning message
     */
    warn(...msg) {
        if (ConsoleLogger.isMoreOrEqualSevere(LogLevel.WARN, this.level)) {
            console.warn(ConsoleLogger.labels.get(LogLevel.WARN), this.name, ...msg);
        }
    }
    /**
     * Log an error message
     */
    error(...msg) {
        if (ConsoleLogger.isMoreOrEqualSevere(LogLevel.ERROR, this.level)) {
            console.error(ConsoleLogger.labels.get(LogLevel.ERROR), this.name, ...msg);
        }
    }
    /**
     * Helper to compare two log levels and determine if a is equal or more severe than b
     */
    static isMoreOrEqualSevere(a, b) {
        return ConsoleLogger.severity[a] >= ConsoleLogger.severity[b];
    }
}
/** Map of labels for each log level */
ConsoleLogger.labels = (() => {
    const entries = objectEntries(LogLevel);
    const map = entries.map(([key, value]) => {
        return [value, `[${key}] `];
    });
    return new Map(map);
})();
/** Map of severity as comparable numbers for each log level */
ConsoleLogger.severity = {
    [LogLevel.ERROR]: 400,
    [LogLevel.WARN]: 300,
    [LogLevel.INFO]: 200,
    [LogLevel.DEBUG]: 100,
};
exports.ConsoleLogger = ConsoleLogger;
let instanceCount = 0;
/**
 * INTERNAL interface for getting or creating a named Logger.
 */
function getLogger(name, level, existingLogger) {
    // Get a unique ID for the logger.
    const instanceId = instanceCount;
    instanceCount += 1;
    // Set up the logger.
    const logger = (() => {
        if (existingLogger !== undefined) {
            return existingLogger;
        }
        return new ConsoleLogger();
    })();
    logger.setName(`${name}:${instanceId}`);
    if (level !== undefined) {
        logger.setLevel(level);
    }
    return logger;
}
exports.getLogger = getLogger;
/**
 * INTERNAL function for transforming an external LoggingFunc type into the Logger interface.
 */
function loggerFromLoggingFunc(name, loggingFunc, level) {
    // Get a unique ID for the logger.
    const instanceId = instanceCount;
    instanceCount += 1;
    let loggerName = `${name}:${instanceId}`;
    let loggerLevel = level;
    // Set up the logger.
    const logger = {
        setLevel(level) {
            loggerLevel = level;
        },
        setName(name) {
            loggerName = name;
        },
        debug(...msg) {
            if (isMoreOrEqualSevere(LogLevel.DEBUG, loggerLevel)) {
                loggingFunc(LogLevel.DEBUG, `${loggerName} ${msg.map(m => JSON.stringify(m)).join(' ')}`);
            }
        },
        info(...msg) {
            if (isMoreOrEqualSevere(LogLevel.INFO, loggerLevel)) {
                loggingFunc(LogLevel.INFO, `${loggerName} ${msg.map(m => JSON.stringify(m)).join(' ')}`);
            }
        },
        warn(...msg) {
            if (isMoreOrEqualSevere(LogLevel.WARN, loggerLevel)) {
                loggingFunc(LogLevel.WARN, `${loggerName} ${msg.map(m => JSON.stringify(m)).join(' ')}`);
            }
        },
        error(...msg) {
            if (isMoreOrEqualSevere(LogLevel.ERROR, loggerLevel)) {
                loggingFunc(LogLevel.ERROR, `${loggerName} ${msg.map(m => JSON.stringify(m)).join(' ')}`);
            }
        },
    };
    return logger;
}
exports.loggerFromLoggingFunc = loggerFromLoggingFunc;
/**
 * INTERNAL determine if a value is a LoggingFunc
 */
function isLoggingFunc(l) {
    return l.debug === undefined;
}
exports.isLoggingFunc = isLoggingFunc;
/* Helpers for loggerFromLoggingFunc */
/**
 * Map of comparable severity values for each log level
 */
const severityByLogLevel = {
    [LogLevel.ERROR]: 400,
    [LogLevel.WARN]: 300,
    [LogLevel.INFO]: 200,
    [LogLevel.DEBUG]: 100,
};
/**
 * Helper to compare two log levels and determine if a is equal or more severe than b
 */
function isMoreOrEqualSevere(a, b) {
    return severityByLogLevel[a] >= severityByLogLevel[b];
}
//# sourceMappingURL=logger.js.map
import { Stream } from 'stream';
import { WebAPICallOptions, WebAPIResultCallback, WebAPICallResult } from './WebClient';
/**
 * Generic method definition
 */
export default interface Method<MethodArguments extends WebAPICallOptions> {
    (options?: MethodArguments & AuxiliaryArguments): Promise<WebAPICallResult>;
    (options: MethodArguments & AuxiliaryArguments, callback: WebAPIResultCallback): void;
}
export interface AuxiliaryArguments {
    [unknownArg: string]: any;
}
export interface TokenOverridable {
    token?: string;
}
export interface LocaleAware {
    include_locale?: boolean;
}
export interface Searchable {
    query: string;
    highlight?: boolean;
    sort: 'score' | 'timestamp';
    sort_dir: 'asc' | 'desc';
}
export interface UserPerspectiveEnabled {
    on_behalf_of?: string;
}
export interface CursorPaginationEnabled {
    limit?: number;
    cursor?: string;
}
export declare const cursorPaginationOptionKeys: Set<string>;
export declare const cursorPaginationEnabledMethods: Map<string, string>;
export interface TimelinePaginationEnabled {
    oldest?: string;
    latest?: string;
    inclusive?: boolean;
}
export declare const timelinePaginationOptionKeys: Set<string>;
export declare const timelinePaginationEnabledMethods: Set<any>;
export interface TraditionalPagingEnabled {
    page?: number;
    count?: number;
}
export declare const traditionalPagingOptionKeys: Set<string>;
export declare const traditionalPagingEnabledMethods: Set<any>;
export interface Dialog {
    title: string;
    callback_id: string;
    elements: {
        type: 'text' | 'textarea' | 'select';
        name: string;
        label: string;
        optional?: boolean;
        placeholder?: string;
        value?: string;
        max_length?: number;
        min_length?: number;
        hint?: string;
        subtype?: 'email' | 'number' | 'tel' | 'url';
        data_source?: 'users' | 'channels' | 'conversations' | 'external';
        selected_options?: SelectOption[];
        options?: SelectOption[];
        option_groups?: {
            label: string;
            options: SelectOption[];
        }[];
        min_query_length?: number;
    }[];
    submit_label?: string;
    notify_on_cancel?: boolean;
    state?: string;
}
export interface ImageElement {
    type: 'image';
    image_url: string;
    alt_text: string;
}
export interface UserElement {
    type: 'user';
    user_id: string;
}
export interface PlainTextElement {
    type: 'plain_text';
    text: string;
    emoji?: boolean;
}
export interface MrkdwnElement {
    type: 'mrkdwn';
    text: string;
    verbatim?: boolean;
}
export interface Option {
    text: PlainTextElement;
    value?: string;
    url?: string;
    description?: PlainTextElement;
}
export interface Confirm {
    title?: PlainTextElement;
    text: PlainTextElement | MrkdwnElement;
    confirm?: PlainTextElement;
    deny?: PlainTextElement;
}
declare type KnownAction = UsersSelect | StaticSelect | ConversationsSelect | ChannelsSelect | ExternalSelect | Button | Overflow | Datepicker;
interface Action {
    type: string;
    action_id?: string;
    confirm?: Confirm;
}
export interface UsersSelect extends Action {
    type: 'users_select';
    initial_user?: string;
    placeholder?: PlainTextElement;
}
export interface StaticSelect extends Action {
    type: 'static_select';
    placeholder?: PlainTextElement;
    initial_option?: Option;
    options?: Option[];
    option_groups?: {
        label: PlainTextElement;
        options: Option[];
    }[];
}
export interface ConversationsSelect extends Action {
    type: 'conversations_select';
    initial_conversation?: string;
    placeholder?: PlainTextElement;
}
export interface ChannelsSelect extends Action {
    type: 'channels_select';
    initial_channel?: string;
    placeholder?: PlainTextElement;
}
export interface ExternalSelect extends Action {
    type: 'external_select';
    initial_option?: Option;
    placeholder?: PlainTextElement;
    min_query_length?: number;
}
export interface Button extends Action {
    type: 'button';
    text: PlainTextElement;
    value?: string;
    url?: string;
}
export interface Overflow extends Action {
    type: 'overflow';
    options: Option[];
}
export interface Datepicker extends Action {
    type: 'datepicker';
    initial_date?: string;
    placeholder?: PlainTextElement;
}
export declare type KnownBlock = ImageBlock | ContextBlock | ActionsBlock | DividerBlock | SectionBlock;
export interface Block {
    type: string;
    block_id?: string;
}
export interface ImageBlock extends Block {
    type: 'image';
    image_url: string;
    alt_text: string;
    title?: PlainTextElement;
}
export interface ContextBlock extends Block {
    type: 'context';
    elements: (ImageElement | UserElement | PlainTextElement | MrkdwnElement)[];
}
export interface ActionsBlock extends Block {
    type: 'actions';
    elements: (KnownAction | Action)[];
}
export interface DividerBlock extends Block {
    type: 'divider';
}
export interface SectionBlock extends Block {
    type: 'section';
    text?: PlainTextElement | MrkdwnElement;
    fields?: (PlainTextElement | MrkdwnElement)[];
    accessory?: KnownAction | Action | ImageElement;
}
export interface MessageAttachment {
    blocks?: (KnownBlock | Block)[];
    fallback?: string;
    color?: 'good' | 'warning' | 'danger' | string;
    pretext?: string;
    author_name?: string;
    author_link?: string;
    author_icon?: string;
    title?: string;
    title_link?: string;
    text?: string;
    fields?: {
        title: string;
        value: string;
        short?: boolean;
    }[];
    image_url?: string;
    thumb_url?: string;
    footer?: string;
    footer_icon?: string;
    ts?: string;
    actions?: AttachmentAction[];
    callback_id?: string;
    mrkdwn_in?: ('pretext' | 'text' | 'fields')[];
}
export interface AttachmentAction {
    id?: string;
    confirm?: Confirmation;
    data_source?: 'static' | 'channels' | 'conversations' | 'users' | 'external';
    min_query_length?: number;
    name?: string;
    options?: OptionField[];
    option_groups?: {
        text: string;
        options: OptionField[];
    }[];
    selected_options?: OptionField[];
    style?: 'default' | 'primary' | 'danger';
    text: string;
    type: 'button' | 'select';
    value?: string;
    url?: string;
}
export interface OptionField {
    description?: string;
    text: string;
    value: string;
}
export interface Confirmation {
    dismiss_text?: string;
    ok_text?: string;
    text: string;
    title?: string;
}
export interface LinkUnfurls {
    [linkUrl: string]: MessageAttachment;
}
export interface SelectOption {
    label: string;
    value: string;
}
export declare type APITestArguments = {};
export declare type AppsPermissionsInfoArguments = TokenOverridable & {};
export declare type AppsPermissionsRequestArguments = TokenOverridable & {
    scopes: string;
    trigger_id: string;
};
export declare type AppsPermissionsResourcesListArguments = TokenOverridable & CursorPaginationEnabled;
export declare type AppsPermissionsScopesListArguments = TokenOverridable & {};
export declare type AuthRevokeArguments = TokenOverridable & {
    test: boolean;
};
export declare type AuthTestArguments = TokenOverridable & {};
export declare type BotsInfoArguments = TokenOverridable & {
    bot?: string;
};
export declare type ChannelsArchiveArguments = TokenOverridable & {
    channel: string;
};
export declare type ChannelsCreateArguments = TokenOverridable & {
    name: string;
    validate?: boolean;
};
export declare type ChannelsHistoryArguments = TokenOverridable & TimelinePaginationEnabled & {
    channel: string;
    count?: number;
    unreads?: boolean;
};
export declare type ChannelsInfoArguments = TokenOverridable & LocaleAware & {
    channel: string;
};
export declare type ChannelsInviteArguments = TokenOverridable & {
    channel: string;
    user: string;
};
export declare type ChannelsJoinArguments = TokenOverridable & {
    name: string;
    validate?: boolean;
};
export declare type ChannelsKickArguments = TokenOverridable & {
    channel: string;
    user: string;
};
export declare type ChannelsLeaveArguments = TokenOverridable & {
    channel: string;
};
export declare type ChannelsListArguments = TokenOverridable & CursorPaginationEnabled & {
    exclude_archived: boolean;
    exclude_members: boolean;
};
export declare type ChannelsMarkArguments = TokenOverridable & {
    channel: string;
    ts: string;
};
export declare type ChannelsRenameArguments = TokenOverridable & {
    channel: string;
    name: string;
    validate?: boolean;
};
export declare type ChannelsRepliesArguments = TokenOverridable & {
    channel: string;
    thread_ts: string;
};
export declare type ChannelsSetPurposeArguments = TokenOverridable & {
    channel: string;
    purpose: string;
};
export declare type ChannelsSetTopicArguments = TokenOverridable & {
    channel: string;
    topic: string;
};
export declare type ChannelsUnarchiveArguments = TokenOverridable & {
    channel: string;
};
export declare type ChatDeleteArguments = TokenOverridable & {
    channel: string;
    ts: string;
    as_user?: boolean;
};
export declare type ChatDeleteScheduledMessageArguments = TokenOverridable & {
    channel: string;
    scheduled_message_id: string;
    as_user?: boolean;
};
export declare type ChatGetPermalinkArguments = TokenOverridable & {
    channel: string;
    message_ts: string;
};
export declare type ChatListScheduledMessagesArguments = TokenOverridable & CursorPaginationEnabled & {
    channel: string;
    latest: number;
    oldest: number;
};
export declare type ChatMeMessageArguments = TokenOverridable & {
    channel: string;
    text: string;
};
export declare type ChatPostEphemeralArguments = TokenOverridable & {
    channel: string;
    text: string;
    user: string;
    as_user?: boolean;
    attachments?: MessageAttachment[];
    blocks?: (KnownBlock | Block)[];
    link_names?: boolean;
    parse?: 'full' | 'none';
};
export declare type ChatPostMessageArguments = TokenOverridable & {
    channel: string;
    text: string;
    as_user?: boolean;
    attachments?: MessageAttachment[];
    blocks?: (KnownBlock | Block)[];
    icon_emoji?: string;
    icon_url?: string;
    link_names?: boolean;
    mrkdwn?: boolean;
    parse?: 'full' | 'none';
    reply_broadcast?: boolean;
    thread_ts?: string;
    unfurl_links?: boolean;
    unfurl_media?: boolean;
    username?: string;
};
export declare type ChatScheduleMessageArguments = TokenOverridable & {
    channel: string;
    text: string;
    post_at: string;
    as_user?: boolean;
    attachments?: MessageAttachment[];
    blocks?: (KnownBlock | Block)[];
    link_names?: boolean;
    parse?: 'full' | 'none';
    reply_broadcast?: boolean;
    thread_ts?: string;
    unfurl_links?: boolean;
    unfurl_media?: boolean;
};
export declare type ChatUnfurlArguments = TokenOverridable & {
    channel: string;
    ts: string;
    unfurls: LinkUnfurls;
    user_auth_message?: string;
    user_auth_required?: boolean;
    user_auth_url?: string;
};
export declare type ChatUpdateArguments = TokenOverridable & {
    channel: string;
    text: string;
    ts: string;
    as_user?: boolean;
    attachments?: MessageAttachment[];
    blocks?: (KnownBlock | Block)[];
    link_names?: boolean;
    parse?: 'full' | 'none';
};
export declare type ConversationsArchiveArguments = TokenOverridable & {
    channel: string;
};
export declare type ConversationsCloseArguments = TokenOverridable & {
    channel: string;
};
export declare type ConversationsCreateArguments = TokenOverridable & {
    name: string;
    is_private?: boolean;
};
export declare type ConversationsHistoryArguments = TokenOverridable & CursorPaginationEnabled & TimelinePaginationEnabled & {
    channel: string;
};
export declare type ConversationsInfoArguments = TokenOverridable & LocaleAware & {
    channel: string;
};
export declare type ConversationsInviteArguments = TokenOverridable & {
    channel: string;
    users: string;
};
export declare type ConversationsJoinArguments = TokenOverridable & {
    channel: string;
};
export declare type ConversationsKickArguments = TokenOverridable & {
    channel: string;
    user: string;
};
export declare type ConversationsLeaveArguments = TokenOverridable & {
    channel: string;
};
export declare type ConversationsListArguments = TokenOverridable & CursorPaginationEnabled & {
    exclude_archived?: boolean;
    types?: string;
};
export declare type ConversationsMembersArguments = TokenOverridable & CursorPaginationEnabled & {
    channel: string;
};
export declare type ConversationsOpenArguments = TokenOverridable & {
    channel?: string;
    users?: string;
    return_im?: boolean;
};
export declare type ConversationsRenameArguments = TokenOverridable & {
    channel: string;
    name: string;
};
export declare type ConversationsRepliesArguments = TokenOverridable & CursorPaginationEnabled & TimelinePaginationEnabled & {
    channel: string;
    ts: string;
};
export declare type ConversationsSetPurposeArguments = TokenOverridable & {
    channel: string;
    purpose: string;
};
export declare type ConversationsSetTopicArguments = TokenOverridable & {
    channel: string;
    topic: string;
};
export declare type ConversationsUnarchiveArguments = TokenOverridable & {
    channel: string;
};
export declare type DialogOpenArguments = TokenOverridable & {
    trigger_id: string;
    dialog: Dialog;
};
export declare type DndEndDndArguments = TokenOverridable & UserPerspectiveEnabled;
export declare type DndEndSnoozeArguments = TokenOverridable & UserPerspectiveEnabled;
export declare type DndInfoArguments = TokenOverridable & {
    user: string;
};
export declare type DndSetSnoozeArguments = TokenOverridable & UserPerspectiveEnabled & {
    num_minutes: number;
};
export declare type DndTeamInfoArguments = TokenOverridable & {
    users?: string;
};
export declare type EmojiListArguments = TokenOverridable;
export declare type FilesDeleteArguments = TokenOverridable & {
    file: string;
};
export declare type FilesInfoArguments = TokenOverridable & CursorPaginationEnabled & {
    file: string;
    count?: number;
    page?: number;
};
export declare type FilesListArguments = TokenOverridable & TraditionalPagingEnabled & {
    channel?: string;
    user?: string;
    ts_from?: string;
    ts_to?: string;
    types?: string;
};
export declare type FilesRevokePublicURLArguments = TokenOverridable & {
    file: string;
};
export declare type FilesSharedPublicURLArguments = TokenOverridable & {
    file: string;
};
export declare type FilesUploadArguments = TokenOverridable & {
    channels?: string;
    content?: string;
    file?: Buffer | Stream;
    filename?: string;
    filetype?: string;
    initial_comment?: string;
    title?: string;
    thread_ts?: string;
};
export declare type FilesCommentsAddArguments = TokenOverridable & {
    comment: string;
    file: string;
};
export declare type FilesCommentsDeleteArguments = TokenOverridable & {
    file: string;
    id: string;
};
export declare type FilesCommentsEditArguments = TokenOverridable & {
    comment: string;
    file: string;
    id: string;
};
export declare type GroupsArchiveArguments = TokenOverridable & {
    channel: string;
};
export declare type GroupsCreateArguments = TokenOverridable & {
    name: string;
    validate?: boolean;
};
export declare type GroupsCreateChildArguments = TokenOverridable & {
    channel: string;
};
export declare type GroupsHistoryArguments = TokenOverridable & TimelinePaginationEnabled & {
    channel: string;
    unreads?: boolean;
    count?: number;
};
export declare type GroupsInfoArguments = TokenOverridable & LocaleAware & {
    channel: string;
};
export declare type GroupsInviteArguments = TokenOverridable & {
    channel: string;
    user: string;
};
export declare type GroupsKickArguments = TokenOverridable & {
    channel: string;
    user: string;
};
export declare type GroupsLeaveArguments = TokenOverridable & {
    channel: string;
};
export declare type GroupsListArguments = TokenOverridable & CursorPaginationEnabled & {
    exclude_archived?: boolean;
    exclude_members?: boolean;
};
export declare type GroupsMarkArguments = TokenOverridable & {
    channel: string;
    ts: string;
};
export declare type GroupsOpenArguments = TokenOverridable & {
    channel: string;
};
export declare type GroupsRenameArguments = TokenOverridable & {
    channel: string;
    name: string;
    validate?: boolean;
};
export declare type GroupsRepliesArguments = TokenOverridable & {
    channel: string;
    thread_ts: boolean;
};
export declare type GroupsSetPurposeArguments = TokenOverridable & {
    channel: string;
    purpose: string;
};
export declare type GroupsSetTopicArguments = TokenOverridable & {
    channel: string;
    topic: string;
};
export declare type GroupsUnarchiveArguments = TokenOverridable & {
    channel: string;
};
export declare type IMCloseArguments = TokenOverridable & {
    channel: string;
};
export declare type IMHistoryArguments = TokenOverridable & TimelinePaginationEnabled & {
    channel: string;
    count?: number;
    unreads?: boolean;
};
export declare type IMListArguments = TokenOverridable & CursorPaginationEnabled;
export declare type IMMarkArguments = TokenOverridable & {
    channel: string;
    ts: string;
};
export declare type IMOpenArguments = TokenOverridable & LocaleAware & {
    user: string;
    return_im?: boolean;
};
export declare type IMRepliesArguments = TokenOverridable & {
    channel: string;
    thread_ts?: string;
};
export declare type MigrationExchangeArguments = TokenOverridable & {
    users: string;
    to_old?: boolean;
};
export declare type MPIMCloseArguments = TokenOverridable & {
    channel: string;
};
export declare type MPIMHistoryArguments = TokenOverridable & TimelinePaginationEnabled & {
    channel: string;
    count?: number;
    unreads?: boolean;
};
export declare type MPIMListArguments = TokenOverridable & CursorPaginationEnabled;
export declare type MPIMMarkArguments = TokenOverridable & {
    channel: string;
    ts: string;
};
export declare type MPIMOpenArguments = TokenOverridable & {
    users: string;
};
export declare type MPIMRepliesArguments = TokenOverridable & {
    channel: string;
    thread_ts: string;
};
export declare type OAuthAccessArguments = {
    client_id: string;
    client_secret: string;
    redirect_uri?: string;
    grant_type?: 'authorization_code' | 'refresh_token';
    code?: string;
    refresh_token?: string;
};
export declare type OAuthTokenArguments = {
    client_id: string;
    client_secret: string;
    code: string;
    redirect_uri?: string;
    single_channel?: '0' | '1';
};
export declare type PinsAddArguments = TokenOverridable & {
    channel: string;
    file?: string;
    file_comment?: string;
    timestamp?: string;
};
export declare type PinsListArguments = TokenOverridable & {
    channel: string;
};
export declare type PinsRemoveArguments = TokenOverridable & {
    channel: string;
    file?: string;
    file_comment?: string;
    timestamp?: string;
};
export declare type ReactionsAddArguments = TokenOverridable & {
    name: string;
    channel?: string;
    timestamp?: string;
    file?: string;
    file_comment?: string;
};
export declare type ReactionsGetArguments = TokenOverridable & {
    full?: boolean;
    channel?: string;
    timestamp?: string;
    file?: string;
    file_comment?: string;
};
export declare type ReactionsListArguments = TokenOverridable & TraditionalPagingEnabled & CursorPaginationEnabled & {
    user?: string;
    full?: boolean;
};
export declare type ReactionsRemoveArguments = TokenOverridable & {
    name: string;
    channel?: string;
    timestamp?: string;
    file?: string;
    file_comment?: string;
};
export declare type RemindersAddArguments = TokenOverridable & UserPerspectiveEnabled & {
    text: string;
    time: string | number;
    user?: string;
};
export declare type RemindersCompleteArguments = TokenOverridable & UserPerspectiveEnabled & {
    reminder: string;
};
export declare type RemindersDeleteArguments = TokenOverridable & UserPerspectiveEnabled & {
    reminder: string;
};
export declare type RemindersInfoArguments = TokenOverridable & UserPerspectiveEnabled & {
    reminder: string;
};
export declare type RemindersListArguments = TokenOverridable & UserPerspectiveEnabled;
export declare type RTMConnectArguments = TokenOverridable & {
    batch_presence_aware?: boolean;
    presence_sub?: boolean;
};
export declare type RTMStartArguments = TokenOverridable & LocaleAware & {
    batch_presence_aware?: boolean;
    mpim_aware?: boolean;
    no_latest?: '0' | '1';
    no_unreads?: string;
    presence_sub?: boolean;
    simple_latest?: boolean;
};
export declare type SearchAllArguments = TokenOverridable & TraditionalPagingEnabled & Searchable;
export declare type SearchFilesArguments = TokenOverridable & TraditionalPagingEnabled & Searchable;
export declare type SearchMessagesArguments = TokenOverridable & TraditionalPagingEnabled & Searchable;
export declare type StarsAddArguments = TokenOverridable & {
    channel?: string;
    timestamp?: string;
    file?: string;
    file_comment?: string;
};
export declare type StarsListArguments = TokenOverridable & TraditionalPagingEnabled & CursorPaginationEnabled;
export declare type StarsRemoveArguments = TokenOverridable & {
    channel?: string;
    timestamp?: string;
    file?: string;
    file_comment?: string;
};
export declare type TeamAccessLogsArguments = TokenOverridable & {
    before?: number;
    count?: number;
    page?: number;
};
export declare type TeamBillableInfoArguments = TokenOverridable & {
    user?: string;
};
export declare type TeamInfoArguments = TokenOverridable;
export declare type TeamIntegrationLogsArguments = TokenOverridable & {
    app_id?: string;
    change_type?: string;
    count?: number;
    page?: number;
    service_id?: string;
    user?: string;
};
export declare type TeamProfileGetArguments = TokenOverridable & {
    visibility?: 'all' | 'visible' | 'hidden';
};
export declare type UsergroupsCreateArguments = TokenOverridable & {
    name: string;
    channels?: string;
    description?: string;
    handle?: string;
    include_count?: boolean;
};
export declare type UsergroupsDisableArguments = TokenOverridable & {
    usergroup: string;
    include_count?: boolean;
};
export declare type UsergroupsEnableArguments = TokenOverridable & {
    usergroup: string;
    include_count?: boolean;
};
export declare type UsergroupsListArguments = TokenOverridable & {
    include_count?: boolean;
    include_disabled?: boolean;
    include_users?: boolean;
};
export declare type UsergroupsUpdateArguments = TokenOverridable & {
    usergroup: string;
    channels?: string;
    description?: string;
    handle?: string;
    include_count?: boolean;
    name?: string;
};
export declare type UsergroupsUsersListArguments = TokenOverridable & {
    usergroup: string;
    include_disabled?: boolean;
};
export declare type UsergroupsUsersUpdateArguments = TokenOverridable & {
    usergroup: string;
    users: string;
    include_count?: boolean;
};
export declare type UsersConversationsArguments = TokenOverridable & CursorPaginationEnabled & {
    exclude_archived?: boolean;
    types?: string;
    user?: string;
};
export declare type UsersDeletePhotoArguments = TokenOverridable;
export declare type UsersGetPresenceArguments = TokenOverridable & {
    user: string;
};
export declare type UsersIdentityArguments = TokenOverridable & UserPerspectiveEnabled;
export declare type UsersInfoArguments = TokenOverridable & LocaleAware & {
    user: string;
};
export declare type UsersListArguments = TokenOverridable & CursorPaginationEnabled & LocaleAware & {
    presence?: boolean;
};
export declare type UsersLookupByEmailArguments = TokenOverridable & {
    email: string;
};
export declare type UsersSetActiveArguments = TokenOverridable;
export declare type UsersSetPhotoArguments = TokenOverridable & {
    image: Buffer | Stream;
    crop_w?: number;
    crop_x?: number;
    crop_y?: number;
};
export declare type UsersSetPresenceArguments = TokenOverridable & {
    presence: 'auto' | 'away';
};
export declare type UsersProfileGetArguments = TokenOverridable & {
    include_labels?: boolean;
    user?: string;
};
export declare type UsersProfileSetArguments = TokenOverridable & UserPerspectiveEnabled & {
    profile?: string;
    user?: string;
    name?: string;
    value?: string;
};
export {};

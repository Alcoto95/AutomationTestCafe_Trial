"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
const types_1 = require("../types");
// Base
//--------------------------------------------------------------------
class TestRunErrorBase {
    constructor(code) {
        this.code = code;
        this.isTestCafeError = true;
        this.callsite = null;
    }
}
class ActionOptionErrorBase extends TestRunErrorBase {
    constructor(code, optionName, actualValue) {
        super(code);
        this.optionName = optionName;
        this.actualValue = actualValue;
    }
}
class ActionArgumentErrorBase extends TestRunErrorBase {
    constructor(code, argumentName, actualValue) {
        super(code);
        this.argumentName = argumentName;
        this.actualValue = actualValue;
    }
}
// Synchronization errors
//--------------------------------------------------------------------
class MissingAwaitError extends TestRunErrorBase {
    constructor(callsite) {
        super(types_1.TEST_RUN_ERRORS.missingAwaitError);
        this.callsite = callsite;
    }
}
exports.MissingAwaitError = MissingAwaitError;
// Client function errors
//--------------------------------------------------------------------
class ClientFunctionExecutionInterruptionError extends TestRunErrorBase {
    constructor(instantiationCallsiteName) {
        super(types_1.TEST_RUN_ERRORS.clientFunctionExecutionInterruptionError);
        this.instantiationCallsiteName = instantiationCallsiteName;
    }
}
exports.ClientFunctionExecutionInterruptionError = ClientFunctionExecutionInterruptionError;
class DomNodeClientFunctionResultError extends TestRunErrorBase {
    constructor(instantiationCallsiteName) {
        super(types_1.TEST_RUN_ERRORS.domNodeClientFunctionResultError);
        this.instantiationCallsiteName = instantiationCallsiteName;
    }
}
exports.DomNodeClientFunctionResultError = DomNodeClientFunctionResultError;
// Selector errors
//--------------------------------------------------------------------
class SelectorErrorBase extends TestRunErrorBase {
    constructor(code, { apiFnChain, apiFnIndex }) {
        super(code);
        this.apiFnChain = apiFnChain;
        this.apiFnIndex = apiFnIndex;
    }
}
class InvalidSelectorResultError extends TestRunErrorBase {
    constructor() {
        super(types_1.TEST_RUN_ERRORS.invalidSelectorResultError);
    }
}
exports.InvalidSelectorResultError = InvalidSelectorResultError;
class CannotObtainInfoForElementSpecifiedBySelectorError extends SelectorErrorBase {
    constructor(callsite, apiFnArgs) {
        super(types_1.TEST_RUN_ERRORS.cannotObtainInfoForElementSpecifiedBySelectorError, apiFnArgs);
        this.callsite = callsite;
    }
}
exports.CannotObtainInfoForElementSpecifiedBySelectorError = CannotObtainInfoForElementSpecifiedBySelectorError;
// Page errors
//--------------------------------------------------------------------
class PageLoadError extends TestRunErrorBase {
    constructor(errMsg, url) {
        super(types_1.TEST_RUN_ERRORS.pageLoadError);
        this.url = url;
        this.errMsg = errMsg;
    }
}
exports.PageLoadError = PageLoadError;
// Uncaught errors
//--------------------------------------------------------------------
class UncaughtErrorOnPage extends TestRunErrorBase {
    constructor(errStack, pageDestUrl) {
        super(types_1.TEST_RUN_ERRORS.uncaughtErrorOnPage);
        this.errStack = errStack;
        this.pageDestUrl = pageDestUrl;
    }
}
exports.UncaughtErrorOnPage = UncaughtErrorOnPage;
class UncaughtErrorInTestCode extends TestRunErrorBase {
    constructor(err, callsite) {
        super(types_1.TEST_RUN_ERRORS.uncaughtErrorInTestCode);
        this.errMsg = String(err.rawMessage || err);
        this.callsite = err.callsite || callsite;
        this.originError = err;
    }
}
exports.UncaughtErrorInTestCode = UncaughtErrorInTestCode;
class UncaughtNonErrorObjectInTestCode extends TestRunErrorBase {
    constructor(obj) {
        super(types_1.TEST_RUN_ERRORS.uncaughtNonErrorObjectInTestCode);
        this.objType = typeof obj;
        this.objStr = String(obj);
    }
}
exports.UncaughtNonErrorObjectInTestCode = UncaughtNonErrorObjectInTestCode;
class UncaughtErrorInClientFunctionCode extends TestRunErrorBase {
    constructor(instantiationCallsiteName, err) {
        super(types_1.TEST_RUN_ERRORS.uncaughtErrorInClientFunctionCode);
        this.errMsg = String(err);
        this.instantiationCallsiteName = instantiationCallsiteName;
    }
}
exports.UncaughtErrorInClientFunctionCode = UncaughtErrorInClientFunctionCode;
class UncaughtErrorInCustomDOMPropertyCode extends TestRunErrorBase {
    constructor(instantiationCallsiteName, err, prop) {
        super(types_1.TEST_RUN_ERRORS.uncaughtErrorInCustomDOMPropertyCode, err, prop);
        this.errMsg = String(err);
        this.property = prop;
        this.instantiationCallsiteName = instantiationCallsiteName;
    }
}
exports.UncaughtErrorInCustomDOMPropertyCode = UncaughtErrorInCustomDOMPropertyCode;
class UnhandledPromiseRejectionError extends TestRunErrorBase {
    constructor(err) {
        super(types_1.TEST_RUN_ERRORS.unhandledPromiseRejection);
        this.errMsg = String(err);
    }
}
exports.UnhandledPromiseRejectionError = UnhandledPromiseRejectionError;
class UncaughtExceptionError extends TestRunErrorBase {
    constructor(err) {
        super(types_1.TEST_RUN_ERRORS.uncaughtException);
        this.errMsg = String(err);
    }
}
exports.UncaughtExceptionError = UncaughtExceptionError;
// Assertion errors
//--------------------------------------------------------------------
class ExternalAssertionLibraryError extends TestRunErrorBase {
    constructor(err, callsite) {
        super(types_1.TEST_RUN_ERRORS.externalAssertionLibraryError);
        this.errMsg = String(err);
        this.callsite = callsite;
    }
}
exports.ExternalAssertionLibraryError = ExternalAssertionLibraryError;
class AssertionExecutableArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, argumentValue, err, isAPIError) {
        super(types_1.TEST_RUN_ERRORS.assertionExecutableArgumentError, argumentName, argumentValue);
        this.errMsg = isAPIError ? err.rawMessage : err.message;
        this.originError = err;
    }
}
exports.AssertionExecutableArgumentError = AssertionExecutableArgumentError;
class AssertionWithoutMethodCallError extends TestRunErrorBase {
    constructor(callsite) {
        super(types_1.TEST_RUN_ERRORS.assertionWithoutMethodCallError);
        this.callsite = callsite;
    }
}
exports.AssertionWithoutMethodCallError = AssertionWithoutMethodCallError;
class AssertionUnawaitedPromiseError extends TestRunErrorBase {
    constructor(callsite) {
        super(types_1.TEST_RUN_ERRORS.assertionUnawaitedPromiseError);
        this.callsite = callsite;
    }
}
exports.AssertionUnawaitedPromiseError = AssertionUnawaitedPromiseError;
// Action parameters errors
//--------------------------------------------------------------------
// Options errors
class ActionIntegerOptionError extends ActionOptionErrorBase {
    constructor(optionName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionIntegerOptionError, optionName, actualValue);
    }
}
exports.ActionIntegerOptionError = ActionIntegerOptionError;
class ActionPositiveIntegerOptionError extends ActionOptionErrorBase {
    constructor(optionName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionPositiveIntegerOptionError, optionName, actualValue);
    }
}
exports.ActionPositiveIntegerOptionError = ActionPositiveIntegerOptionError;
class ActionBooleanOptionError extends ActionOptionErrorBase {
    constructor(optionName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionBooleanOptionError, optionName, actualValue);
    }
}
exports.ActionBooleanOptionError = ActionBooleanOptionError;
class ActionBooleanArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionBooleanArgumentError, argumentName, actualValue);
    }
}
exports.ActionBooleanArgumentError = ActionBooleanArgumentError;
class ActionSpeedOptionError extends ActionOptionErrorBase {
    constructor(optionName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionSpeedOptionError, optionName, actualValue);
    }
}
exports.ActionSpeedOptionError = ActionSpeedOptionError;
class ActionOptionsTypeError extends TestRunErrorBase {
    constructor(actualType) {
        super(types_1.TEST_RUN_ERRORS.actionOptionsTypeError);
        this.actualType = actualType;
    }
}
exports.ActionOptionsTypeError = ActionOptionsTypeError;
// Arguments errors
class ActionStringArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionStringArgumentError, argumentName, actualValue);
    }
}
exports.ActionStringArgumentError = ActionStringArgumentError;
class ActionNullableStringArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionNullableStringArgumentError, argumentName, actualValue);
    }
}
exports.ActionNullableStringArgumentError = ActionNullableStringArgumentError;
class ActionIntegerArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionIntegerArgumentError, argumentName, actualValue);
    }
}
exports.ActionIntegerArgumentError = ActionIntegerArgumentError;
class ActionRoleArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionRoleArgumentError, argumentName, actualValue);
    }
}
exports.ActionRoleArgumentError = ActionRoleArgumentError;
class ActionPositiveIntegerArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionPositiveIntegerArgumentError, argumentName, actualValue);
    }
}
exports.ActionPositiveIntegerArgumentError = ActionPositiveIntegerArgumentError;
class ActionStringOrStringArrayArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionStringOrStringArrayArgumentError, argumentName, actualValue);
    }
}
exports.ActionStringOrStringArrayArgumentError = ActionStringOrStringArrayArgumentError;
class ActionStringArrayElementError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue, elementIndex) {
        super(types_1.TEST_RUN_ERRORS.actionStringArrayElementError, argumentName, actualValue);
        this.elementIndex = elementIndex;
    }
}
exports.ActionStringArrayElementError = ActionStringArrayElementError;
class SetTestSpeedArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.setTestSpeedArgumentError, argumentName, actualValue);
    }
}
exports.SetTestSpeedArgumentError = SetTestSpeedArgumentError;
class ActionUnsupportedDeviceTypeError extends ActionArgumentErrorBase {
    constructor(argumentName, argumentValue) {
        super(types_1.TEST_RUN_ERRORS.actionUnsupportedDeviceTypeError, argumentName, argumentValue);
    }
}
exports.ActionUnsupportedDeviceTypeError = ActionUnsupportedDeviceTypeError;
// Selector errors
class ActionSelectorError extends TestRunErrorBase {
    constructor(selectorName, err, isAPIError) {
        super(types_1.TEST_RUN_ERRORS.actionSelectorError);
        this.selectorName = selectorName;
        this.errMsg = isAPIError ? err.rawMessage : err.message;
        this.originError = err;
    }
}
exports.ActionSelectorError = ActionSelectorError;
// Action execution errors
//--------------------------------------------------------------------
class ActionElementNotFoundError extends SelectorErrorBase {
    constructor(apiFnArgs) {
        super(types_1.TEST_RUN_ERRORS.actionElementNotFoundError, apiFnArgs);
    }
}
exports.ActionElementNotFoundError = ActionElementNotFoundError;
class ActionElementIsInvisibleError extends TestRunErrorBase {
    constructor() {
        super(types_1.TEST_RUN_ERRORS.actionElementIsInvisibleError);
    }
}
exports.ActionElementIsInvisibleError = ActionElementIsInvisibleError;
class ActionSelectorMatchesWrongNodeTypeError extends TestRunErrorBase {
    constructor(nodeDescription) {
        super(types_1.TEST_RUN_ERRORS.actionSelectorMatchesWrongNodeTypeError);
        this.nodeDescription = nodeDescription;
    }
}
exports.ActionSelectorMatchesWrongNodeTypeError = ActionSelectorMatchesWrongNodeTypeError;
class ActionAdditionalElementNotFoundError extends SelectorErrorBase {
    constructor(argumentName, apiFnArgs) {
        super(types_1.TEST_RUN_ERRORS.actionAdditionalElementNotFoundError, apiFnArgs);
        this.argumentName = argumentName;
    }
}
exports.ActionAdditionalElementNotFoundError = ActionAdditionalElementNotFoundError;
class ActionAdditionalElementIsInvisibleError extends TestRunErrorBase {
    constructor(argumentName) {
        super(types_1.TEST_RUN_ERRORS.actionAdditionalElementIsInvisibleError);
        this.argumentName = argumentName;
    }
}
exports.ActionAdditionalElementIsInvisibleError = ActionAdditionalElementIsInvisibleError;
class ActionAdditionalSelectorMatchesWrongNodeTypeError extends TestRunErrorBase {
    constructor(argumentName, nodeDescription) {
        super(types_1.TEST_RUN_ERRORS.actionAdditionalSelectorMatchesWrongNodeTypeError);
        this.argumentName = argumentName;
        this.nodeDescription = nodeDescription;
    }
}
exports.ActionAdditionalSelectorMatchesWrongNodeTypeError = ActionAdditionalSelectorMatchesWrongNodeTypeError;
class ActionElementNonEditableError extends TestRunErrorBase {
    constructor() {
        super(types_1.TEST_RUN_ERRORS.actionElementNonEditableError);
    }
}
exports.ActionElementNonEditableError = ActionElementNonEditableError;
class ActionElementNotTextAreaError extends TestRunErrorBase {
    constructor() {
        super(types_1.TEST_RUN_ERRORS.actionElementNotTextAreaError);
    }
}
exports.ActionElementNotTextAreaError = ActionElementNotTextAreaError;
class ActionElementNonContentEditableError extends TestRunErrorBase {
    constructor(argumentName) {
        super(types_1.TEST_RUN_ERRORS.actionElementNonContentEditableError);
        this.argumentName = argumentName;
    }
}
exports.ActionElementNonContentEditableError = ActionElementNonContentEditableError;
class ActionRootContainerNotFoundError extends TestRunErrorBase {
    constructor() {
        super(types_1.TEST_RUN_ERRORS.actionRootContainerNotFoundError);
    }
}
exports.ActionRootContainerNotFoundError = ActionRootContainerNotFoundError;
class ActionIncorrectKeysError extends TestRunErrorBase {
    constructor(argumentName) {
        super(types_1.TEST_RUN_ERRORS.actionIncorrectKeysError);
        this.argumentName = argumentName;
    }
}
exports.ActionIncorrectKeysError = ActionIncorrectKeysError;
class ActionCannotFindFileToUploadError extends TestRunErrorBase {
    constructor(filePaths) {
        super(types_1.TEST_RUN_ERRORS.actionCannotFindFileToUploadError);
        this.filePaths = filePaths;
    }
}
exports.ActionCannotFindFileToUploadError = ActionCannotFindFileToUploadError;
class ActionElementIsNotFileInputError extends TestRunErrorBase {
    constructor() {
        super(types_1.TEST_RUN_ERRORS.actionElementIsNotFileInputError);
    }
}
exports.ActionElementIsNotFileInputError = ActionElementIsNotFileInputError;
class ActionInvalidScrollTargetError extends TestRunErrorBase {
    constructor(scrollTargetXValid, scrollTargetYValid) {
        super(types_1.TEST_RUN_ERRORS.actionInvalidScrollTargetError);
        if (!scrollTargetXValid) {
            if (!scrollTargetYValid)
                this.properties = 'scrollTargetX and scrollTargetY properties';
            else
                this.properties = 'scrollTargetX property';
        }
        else
            this.properties = 'scrollTargetY property';
    }
}
exports.ActionInvalidScrollTargetError = ActionInvalidScrollTargetError;
class WindowDimensionsOverflowError extends TestRunErrorBase {
    constructor(callsite) {
        super(types_1.TEST_RUN_ERRORS.windowDimensionsOverflowError);
        this.callsite = callsite;
    }
}
exports.WindowDimensionsOverflowError = WindowDimensionsOverflowError;
class InvalidElementScreenshotDimensionsError extends TestRunErrorBase {
    constructor(width, height) {
        super(types_1.TEST_RUN_ERRORS.invalidElementScreenshotDimensionsError);
        const widthIsInvalid = width <= 0;
        const heightIsInvalid = height <= 0;
        if (widthIsInvalid) {
            if (heightIsInvalid) {
                this.verb = 'are';
                this.dimensions = 'width and height';
            }
            else {
                this.verb = 'is';
                this.dimensions = 'width';
            }
        }
        else {
            this.verb = 'is';
            this.dimensions = 'height';
        }
    }
}
exports.InvalidElementScreenshotDimensionsError = InvalidElementScreenshotDimensionsError;
class ForbiddenCharactersInScreenshotPathError extends TestRunErrorBase {
    constructor(screenshotPath, forbiddenCharsList) {
        super(types_1.TEST_RUN_ERRORS.forbiddenCharactersInScreenshotPathError);
        this.screenshotPath = screenshotPath;
        this.forbiddenCharsList = forbiddenCharsList;
    }
}
exports.ForbiddenCharactersInScreenshotPathError = ForbiddenCharactersInScreenshotPathError;
class RoleSwitchInRoleInitializerError extends TestRunErrorBase {
    constructor(callsite) {
        super(types_1.TEST_RUN_ERRORS.roleSwitchInRoleInitializerError);
        this.callsite = callsite;
    }
}
exports.RoleSwitchInRoleInitializerError = RoleSwitchInRoleInitializerError;
// Iframe errors
class ActionElementNotIframeError extends TestRunErrorBase {
    constructor() {
        super(types_1.TEST_RUN_ERRORS.actionElementNotIframeError);
    }
}
exports.ActionElementNotIframeError = ActionElementNotIframeError;
class ActionIframeIsNotLoadedError extends TestRunErrorBase {
    constructor() {
        super(types_1.TEST_RUN_ERRORS.actionIframeIsNotLoadedError);
    }
}
exports.ActionIframeIsNotLoadedError = ActionIframeIsNotLoadedError;
class CurrentIframeIsNotLoadedError extends TestRunErrorBase {
    constructor() {
        super(types_1.TEST_RUN_ERRORS.currentIframeIsNotLoadedError);
    }
}
exports.CurrentIframeIsNotLoadedError = CurrentIframeIsNotLoadedError;
class CurrentIframeNotFoundError extends TestRunErrorBase {
    constructor() {
        super(types_1.TEST_RUN_ERRORS.currentIframeNotFoundError);
    }
}
exports.CurrentIframeNotFoundError = CurrentIframeNotFoundError;
class CurrentIframeIsInvisibleError extends TestRunErrorBase {
    constructor() {
        super(types_1.TEST_RUN_ERRORS.currentIframeIsInvisibleError);
    }
}
exports.CurrentIframeIsInvisibleError = CurrentIframeIsInvisibleError;
// Native dialog errors
class NativeDialogNotHandledError extends TestRunErrorBase {
    constructor(dialogType, url) {
        super(types_1.TEST_RUN_ERRORS.nativeDialogNotHandledError);
        this.dialogType = dialogType;
        this.pageUrl = url;
    }
}
exports.NativeDialogNotHandledError = NativeDialogNotHandledError;
class UncaughtErrorInNativeDialogHandler extends TestRunErrorBase {
    constructor(dialogType, errMsg, url) {
        super(types_1.TEST_RUN_ERRORS.uncaughtErrorInNativeDialogHandler);
        this.dialogType = dialogType;
        this.errMsg = errMsg;
        this.pageUrl = url;
    }
}
exports.UncaughtErrorInNativeDialogHandler = UncaughtErrorInNativeDialogHandler;
class SetNativeDialogHandlerCodeWrongTypeError extends TestRunErrorBase {
    constructor(actualType) {
        super(types_1.TEST_RUN_ERRORS.setNativeDialogHandlerCodeWrongTypeError);
        this.actualType = actualType;
    }
}
exports.SetNativeDialogHandlerCodeWrongTypeError = SetNativeDialogHandlerCodeWrongTypeError;
class RequestHookUnhandledError extends TestRunErrorBase {
    constructor(err, hookClassName, methodName) {
        super(types_1.TEST_RUN_ERRORS.requestHookUnhandledError);
        this.errMsg = String(err);
        this.hookClassName = hookClassName;
        this.methodName = methodName;
    }
}
exports.RequestHookUnhandledError = RequestHookUnhandledError;
class RequestHookNotImplementedMethodError extends TestRunErrorBase {
    constructor(methodName, hookClassName) {
        super(types_1.TEST_RUN_ERRORS.requestHookNotImplementedError);
        this.methodName = methodName;
        this.hookClassName = hookClassName;
    }
}
exports.RequestHookNotImplementedMethodError = RequestHookNotImplementedMethodError;
//# sourceMappingURL=data:application/json;base64,
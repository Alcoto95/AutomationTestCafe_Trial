"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_base_1 = __importDefault(require("./configuration-base"));
const option_source_1 = __importDefault(require("./option-source"));
const default_values_1 = require("./default-values");
const lodash_1 = require("lodash");
const warning_message_1 = __importDefault(require("../notifications/warning-message"));
const render_template_1 = __importDefault(require("../utils/render-template"));
const lazyRequire = require('import-lazy')(require);
const typescript = lazyRequire('typescript');
class TypescriptConfiguration extends configuration_base_1.default {
    constructor(tsConfigPath) {
        const basePath = process.cwd();
        super(tsConfigPath);
        this.basePath = basePath;
        for (const option in default_values_1.DEFAULT_TYPESCRIPT_COMPILER_OPTIONS)
            this._ensureOptionWithValue(option, default_values_1.DEFAULT_TYPESCRIPT_COMPILER_OPTIONS[option], option_source_1.default.configuration);
    }
    async init() {
        const opts = await this._load();
        if (opts && opts.compilerOptions) {
            const parsedOpts = this._parseOptions(opts);
            this.mergeOptions(parsedOpts);
        }
        this._notifyThatOptionsCannotBeOverriden();
    }
    _parseOptions(opts) {
        const parsed = typescript.parseJsonConfigFileContent(opts, typescript.sys, this.basePath, void 0, this._filePath);
        return lodash_1.omit(parsed.options, default_values_1.TYPESCRIPT_BLACKLISTED_OPTIONS);
    }
    _notifyThatOptionsCannotBeOverriden() {
        const warnedOptions = lodash_1.intersection(this._overridenOptions, default_values_1.TYPESCRIPT_COMPILER_NON_OVERRIDABLE_OPTIONS);
        if (!warnedOptions.length)
            return;
        const warningMessage = warnedOptions
            .map(option => render_template_1.default(warning_message_1.default.cannotOverrideTypeScriptConfigOptions, option))
            .join('\n');
        configuration_base_1.default._showConsoleWarning(warningMessage);
    }
    _setOptionValue(option, value) {
        if (default_values_1.TYPESCRIPT_COMPILER_NON_OVERRIDABLE_OPTIONS.indexOf(option.name) === -1)
            super._setOptionValue(option, value);
    }
}
exports.default = TypescriptConfiguration;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXNjcmlwdC1jb25maWd1cmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZ3VyYXRpb24vdHlwZXNjcmlwdC1jb25maWd1cmF0aW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOEVBQWlEO0FBQ2pELG9FQUEyQztBQUMzQyxxREFBb0o7QUFDcEosbUNBQTRDO0FBQzVDLHVGQUFnRTtBQUNoRSwrRUFBc0Q7QUFFdEQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BELE1BQU0sVUFBVSxHQUFJLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUU5QyxNQUFxQix1QkFBd0IsU0FBUSw0QkFBYTtJQUM5RCxZQUFhLFlBQVk7UUFDckIsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRS9CLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVwQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUV6QixLQUFLLE1BQU0sTUFBTSxJQUFJLG9EQUFtQztZQUNwRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLG9EQUFtQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLHVCQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDckgsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJO1FBQ04sTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFaEMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUM5QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRTVDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDakM7UUFFRCxJQUFJLENBQUMsbUNBQW1DLEVBQUUsQ0FBQztJQUMvQyxDQUFDO0lBRUQsYUFBYSxDQUFFLElBQUk7UUFDZixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsMEJBQTBCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFbEgsT0FBTyxhQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSwrQ0FBOEIsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxtQ0FBbUM7UUFDL0IsTUFBTSxhQUFhLEdBQUcscUJBQVksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsNERBQTJDLENBQUMsQ0FBQztRQUV4RyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU07WUFDckIsT0FBTztRQUVYLE1BQU0sY0FBYyxHQUFHLGFBQWE7YUFDL0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMseUJBQWMsQ0FBQyx5QkFBZ0IsQ0FBQyxxQ0FBcUMsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUM3RixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFaEIsNEJBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsZUFBZSxDQUFFLE1BQU0sRUFBRSxLQUFLO1FBQzFCLElBQUksNERBQTJDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkUsS0FBSyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNKO0FBL0NELDBDQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25maWd1cmF0aW9uIGZyb20gJy4vY29uZmlndXJhdGlvbi1iYXNlJztcbmltcG9ydCBvcHRpb25Tb3VyY2UgZnJvbSAnLi9vcHRpb24tc291cmNlJztcbmltcG9ydCB7IERFRkFVTFRfVFlQRVNDUklQVF9DT01QSUxFUl9PUFRJT05TLCBUWVBFU0NSSVBUX0NPTVBJTEVSX05PTl9PVkVSUklEQUJMRV9PUFRJT05TLCBUWVBFU0NSSVBUX0JMQUNLTElTVEVEX09QVElPTlMgfSBmcm9tICcuL2RlZmF1bHQtdmFsdWVzJztcbmltcG9ydCB7IGludGVyc2VjdGlvbiwgb21pdCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgV0FSTklOR19NRVNTQUdFUyBmcm9tICcuLi9ub3RpZmljYXRpb25zL3dhcm5pbmctbWVzc2FnZSc7XG5pbXBvcnQgcmVuZGVyVGVtcGxhdGUgZnJvbSAnLi4vdXRpbHMvcmVuZGVyLXRlbXBsYXRlJztcblxuY29uc3QgbGF6eVJlcXVpcmUgPSByZXF1aXJlKCdpbXBvcnQtbGF6eScpKHJlcXVpcmUpO1xuY29uc3QgdHlwZXNjcmlwdCAgPSBsYXp5UmVxdWlyZSgndHlwZXNjcmlwdCcpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUeXBlc2NyaXB0Q29uZmlndXJhdGlvbiBleHRlbmRzIENvbmZpZ3VyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yICh0c0NvbmZpZ1BhdGgpIHtcbiAgICAgICAgY29uc3QgYmFzZVBhdGggPSBwcm9jZXNzLmN3ZCgpO1xuXG4gICAgICAgIHN1cGVyKHRzQ29uZmlnUGF0aCk7XG5cbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuXG4gICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIGluIERFRkFVTFRfVFlQRVNDUklQVF9DT01QSUxFUl9PUFRJT05TKVxuICAgICAgICAgICAgdGhpcy5fZW5zdXJlT3B0aW9uV2l0aFZhbHVlKG9wdGlvbiwgREVGQVVMVF9UWVBFU0NSSVBUX0NPTVBJTEVSX09QVElPTlNbb3B0aW9uXSwgb3B0aW9uU291cmNlLmNvbmZpZ3VyYXRpb24pO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQgKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gYXdhaXQgdGhpcy5fbG9hZCgpO1xuXG4gICAgICAgIGlmIChvcHRzICYmIG9wdHMuY29tcGlsZXJPcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRPcHRzID0gdGhpcy5fcGFyc2VPcHRpb25zKG9wdHMpO1xuXG4gICAgICAgICAgICB0aGlzLm1lcmdlT3B0aW9ucyhwYXJzZWRPcHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX25vdGlmeVRoYXRPcHRpb25zQ2Fubm90QmVPdmVycmlkZW4oKTtcbiAgICB9XG5cbiAgICBfcGFyc2VPcHRpb25zIChvcHRzKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHR5cGVzY3JpcHQucGFyc2VKc29uQ29uZmlnRmlsZUNvbnRlbnQob3B0cywgdHlwZXNjcmlwdC5zeXMsIHRoaXMuYmFzZVBhdGgsIHZvaWQgMCwgdGhpcy5fZmlsZVBhdGgpO1xuXG4gICAgICAgIHJldHVybiBvbWl0KHBhcnNlZC5vcHRpb25zLCBUWVBFU0NSSVBUX0JMQUNLTElTVEVEX09QVElPTlMpO1xuICAgIH1cblxuICAgIF9ub3RpZnlUaGF0T3B0aW9uc0Nhbm5vdEJlT3ZlcnJpZGVuICgpIHtcbiAgICAgICAgY29uc3Qgd2FybmVkT3B0aW9ucyA9IGludGVyc2VjdGlvbih0aGlzLl9vdmVycmlkZW5PcHRpb25zLCBUWVBFU0NSSVBUX0NPTVBJTEVSX05PTl9PVkVSUklEQUJMRV9PUFRJT05TKTtcblxuICAgICAgICBpZiAoIXdhcm5lZE9wdGlvbnMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHdhcm5pbmdNZXNzYWdlID0gd2FybmVkT3B0aW9uc1xuICAgICAgICAgICAgLm1hcChvcHRpb24gPT4gcmVuZGVyVGVtcGxhdGUoV0FSTklOR19NRVNTQUdFUy5jYW5ub3RPdmVycmlkZVR5cGVTY3JpcHRDb25maWdPcHRpb25zLCBvcHRpb24pKVxuICAgICAgICAgICAgLmpvaW4oJ1xcbicpO1xuXG4gICAgICAgIENvbmZpZ3VyYXRpb24uX3Nob3dDb25zb2xlV2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgX3NldE9wdGlvblZhbHVlIChvcHRpb24sIHZhbHVlKSB7XG4gICAgICAgIGlmIChUWVBFU0NSSVBUX0NPTVBJTEVSX05PTl9PVkVSUklEQUJMRV9PUFRJT05TLmluZGV4T2Yob3B0aW9uLm5hbWUpID09PSAtMSlcbiAgICAgICAgICAgIHN1cGVyLl9zZXRPcHRpb25WYWx1ZShvcHRpb24sIHZhbHVlKTtcbiAgICB9XG59XG4iXX0=